



# kiosk frontend
upstream frontend{
    server i11d101.p.ssafy.io:3000; #3000번 포트

}

# web frontend2
upstream frontend2{
    server i11d101.p.ssafy.io:3001; #3001번 포트
}
# backend
upstream backend{
    server i11d101.p.ssafy.io:8000; #8000번 포트
}

server {
    # 80포트 열기
  
    listen 80;
    server_name i11d101.p.ssafy.io ;
    
    # CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';



    # / 경로는 웹페이지 서비스로33333 ( frontend )
    location /FE/web/ {
        proxy_pass http://frontend/;
        #proxy_pass http://www.naver.com/;
    
    
    }

    # /frontend2 경로는 두 번째 웹페이지 서비스로 ( frontend2 )//
    location /frontend2 {
        proxy_pass http://frontend2;
    }

    # /api 경로는 api 서비스로 ( backend )
    location /ty/ {
        proxy_pass http://backend/;
         # proxy 요청에 원래 호스트 헤더를 설정
        proxy_set_header Host $host;
        # 클라이언트의 실제 IP를 X-Real-IP 헤더에 설정. 백엔드 서버가 실제 클라이언트의 IP를 알기 위함. -> 로깅, IP 제한, 지리적 위치 서비스 등에 사용.
        proxy_set_header X-Real-IP $remote_addr;
        # X-Forwarded-For 클라이언트의 IP와 경유한 프록시 서버의 IP 목록을 전달. 백엔드 서버가 전체 경로를 추적할 수 있게 함.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # 프로토콜을 X-Forwarded-Proto 헤더에 설정. 이유는 프로토콜이 http인지 https인지 알기 위함 -> 보안 분석, 트래픽 분석 등에 사용.
        proxy_set_header X-Forwarded-Proto $scheme;

    }

}




